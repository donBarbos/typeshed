from _typeshed import Incomplete

from docutils import nodes
from docutils.transforms import Transform

__docformat__: str

class Headers(Transform):
    default_priority: int
    pep_url: str
    pep_cvs_url: str
    rcs_keyword_substitutions: Incomplete
    def apply(self) -> None: ...

class Contents(Transform):
    default_priority: int
    def apply(self) -> None: ...

class TargetNotes(Transform):
    default_priority: int
    def apply(self) -> None: ...
    def cleanup_callback(self, pending) -> None: ...

class PEPZero(Transform):
    default_priority: int
    def apply(self) -> None: ...

class PEPZeroSpecial(nodes.SparseNodeVisitor):
    pep_url: Incomplete
    def unknown_visit(self, node) -> None: ...
    def visit_reference(self, node) -> None: ...
    def visit_field_list(self, node) -> None: ...
    pep_table: Incomplete
    entry: int
    def visit_tgroup(self, node) -> None: ...
    def visit_colspec(self, node) -> None: ...
    def visit_row(self, node) -> None: ...
    def visit_entry(self, node) -> None: ...

non_masked_addresses: Incomplete

def mask_email(ref, pepno: Incomplete | None = None): ...
