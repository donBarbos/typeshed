import re
from _typeshed import StrPath, Unused
from collections.abc import Iterable
from pathlib import Path
from typing import Any, ClassVar, Final, Literal, TypeVar
from typing_extensions import deprecated

from docutils.nodes import Node, NodeVisitor, _Document
from docutils.utils import Reporter
from docutils.writers import Writer as _Writer

_K = TypeVar("_K")
_V = TypeVar("_V")

LATEX_WRITER_DIR: Final[Path]

class Writer(_Writer[str]):
    supported: ClassVar[tuple[str, ...]]
    default_template: ClassVar[str]
    default_template_path: ClassVar[Path]
    default_preamble: ClassVar[str]
    table_style_values: ClassVar[list[str]]
    settings_spec: ClassVar[tuple[Any, ...]]
    relative_path_settings: ClassVar[tuple[str, ...]]
    settings_defaults: ClassVar[dict[str, int]]
    config_section: ClassVar[str]
    config_section_dependencies: ClassVar[tuple[str, ...]]
    head_parts: ClassVar[tuple[str, ...]]
    visitor_attributes: ClassVar[tuple[str, ...]]
    def __init__(self) -> None: ...
    def translate(self) -> None: ...
    def assemble_parts(self) -> None: ...

class Babel:
    language_codes: ClassVar[dict[str, str]]
    warn_msg: ClassVar[str]
    active_chars: ClassVar[dict[str, str]]

    reporter: Reporter | None
    language: str
    otherlanguages: dict[str, str]

    def __init__(self, language_code: str, reporter: Reporter | None = None) -> None: ...
    def __call__(self) -> str: ...
    def language_name(self, language_code: str) -> str: ...
    def get_language(self) -> str: ...

class SortableDict(dict[_K, _V]):
    def sortedkeys(self) -> list[_K]: ...
    def sortedvalues(self) -> list[_V]: ...

class PreambleCmds:
    color: ClassVar[str]
    float: ClassVar[str]
    linking: ClassVar[str]
    minitoc: ClassVar[str]
    table: ClassVar[str]
    table_columnwidth: ClassVar[str]
    textcomp: ClassVar[str]
    abstract_legacy: ClassVar[str]
    admonition_legacy: ClassVar[str]
    error_legacy: ClassVar[str]
    title_legacy: ClassVar[str]
    toc_list: ClassVar[str]
    ttem: ClassVar[str]

class CharMaps:
    alltt: ClassVar[dict[int, str]]
    special: ClassVar[dict[int, str]]
    unsupported_unicode: ClassVar[dict[int, str]]
    utf8_supported_unicode: ClassVar[dict[int, str]]
    textcomp: ClassVar[dict[int, str]]
    pifont: ClassVar[dict[int, str]]

class DocumentClass:
    def __init__(self, document_class, with_part: bool = False) -> None: ...
    def section(self, level: int) -> str: ...
    def latex_section_depth(self, depth: int) -> int: ...

class Table:
    legacy_column_widths: bool
    def __init__(self, translator: LaTeXTranslator, latex_type: str) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def is_open(self) -> bool: ...
    def set_table_style(self, node, settings) -> None: ...
    def get_latex_type(self) -> str: ...
    def set(self, attr, value) -> None: ...
    def get(self, attr): ...
    def get_vertical_bar(self) -> Literal["|", ""]: ...
    def get_opening(self, width: str = r"\linewidth") -> str: ...
    def get_closing(self) -> str: ...
    def visit_colspec(self, node) -> None: ...
    def get_colspecs(self, node) -> str: ...
    def get_column_width(self) -> str: ...
    def get_multicolumn_width(self, start: int, len_: int) -> str: ...
    @deprecated("`writers.latex2e.Table.get_caption()` is obsolete and will be removed in Docutils 0.22.")
    def get_caption(self) -> str: ...
    def need_recurse(self) -> bool | Literal[0]: ...
    def visit_thead(self) -> list[str]: ...
    def depart_thead(self) -> list[str]: ...
    def visit_row(self) -> None: ...
    def depart_row(self) -> list[str]: ...
    def set_rowspan(self, cell, value) -> None: ...
    def get_rowspan(self, cell): ...
    def get_entry_number(self) -> int: ...
    def visit_entry(self) -> None: ...
    def is_stub_column(self): ...

class LaTeXTranslator(NodeVisitor):
    is_xetex: ClassVar[bool]
    compound_enumerators: ClassVar[bool]
    section_prefix_for_enumerators: ClassVar[bool]
    section_enumerator_separator: ClassVar[str]
    has_latex_toc: ClassVar[bool]
    section_level: ClassVar[int]
    inside_citation_reference_label: ClassVar[bool]
    verbatim: ClassVar[bool]
    insert_non_breaking_blanks: ClassVar[bool]
    insert_newline: ClassVar[bool]
    literal: ClassVar[bool]
    alltt: ClassVar[bool]

    def __init__(self, document: _Document, babel_class: type = Babel) -> None: ...
    def stylesheet_call(self, path: StrPath) -> str: ...
    def to_latex_encoding(self, docutils_encoding: str) -> str: ...
    def language_label(self, docutil_label: str): ...
    def encode(self, text: str) -> str: ...
    def attval(self, text: str, whitespace: re.Pattern[str] = ...) -> str: ...
    def is_inline(self, node: Node) -> bool: ...
    def append_hypertargets(self, node) -> None: ...
    def set_align_from_classes(self, node) -> None: ...
    def insert_align_declaration(self, node, default=None) -> None: ...
    def duclass_open(self, node) -> None: ...
    def duclass_close(self, node) -> None: ...
    def push_output_collector(self, new_out) -> None: ...
    def pop_output_collector(self) -> None: ...
    def term_postfix(self, node) -> str: ...
    def visit_Text(self, node) -> None: ...
    def depart_Text(self, node) -> None: ...
    def visit_abbreviation(self, node) -> None: ...
    def depart_abbreviation(self, node) -> None: ...
    def visit_acronym(self, node) -> None: ...
    def depart_acronym(self, node) -> None: ...
    def visit_address(self, node) -> None: ...
    def depart_address(self, node) -> None: ...
    def visit_admonition(self, node) -> None: ...
    def depart_admonition(self, node) -> None: ...
    def visit_author(self, node) -> None: ...
    def depart_author(self, node) -> None: ...
    def visit_authors(self, node) -> None: ...
    def depart_authors(self, node) -> None: ...
    def visit_block_quote(self, node) -> None: ...
    def depart_block_quote(self, node) -> None: ...
    def visit_bullet_list(self, node) -> None: ...
    def depart_bullet_list(self, node) -> None: ...
    def visit_superscript(self, node) -> None: ...
    def depart_superscript(self, node) -> None: ...
    def visit_subscript(self, node) -> None: ...
    def depart_subscript(self, node) -> None: ...
    def visit_caption(self, node) -> None: ...
    def depart_caption(self, node) -> None: ...
    def visit_title_reference(self, node) -> None: ...
    def depart_title_reference(self, node) -> None: ...
    def visit_citation(self, node) -> None: ...
    def depart_citation(self, node) -> None: ...
    def visit_citation_reference(self, node) -> None: ...
    def depart_citation_reference(self, node) -> None: ...
    def visit_classifier(self, node) -> None: ...
    def depart_classifier(self, node) -> None: ...
    def visit_colspec(self, node) -> None: ...
    def depart_colspec(self, node) -> None: ...
    def visit_comment(self, node) -> None: ...
    def depart_comment(self, node) -> None: ...
    def visit_compound(self, node) -> None: ...
    def depart_compound(self, node) -> None: ...
    def visit_contact(self, node) -> None: ...
    def depart_contact(self, node) -> None: ...
    def visit_container(self, node) -> None: ...
    def depart_container(self, node) -> None: ...
    def visit_copyright(self, node) -> None: ...
    def depart_copyright(self, node) -> None: ...
    def visit_date(self, node) -> None: ...
    def depart_date(self, node) -> None: ...
    def visit_decoration(self, node) -> None: ...
    def depart_decoration(self, node) -> None: ...
    def visit_definition(self, node) -> None: ...
    def depart_definition(self, node) -> None: ...
    def visit_definition_list(self, node) -> None: ...
    def depart_definition_list(self, node) -> None: ...
    def visit_definition_list_item(self, node) -> None: ...
    def depart_definition_list_item(self, node) -> None: ...
    def visit_description(self, node) -> None: ...
    def depart_description(self, node) -> None: ...
    def visit_docinfo(self, node) -> None: ...
    def depart_docinfo(self, node) -> None: ...
    def visit_docinfo_item(self, node, name: str) -> None: ...
    def depart_docinfo_item(self, node) -> None: ...
    def visit_doctest_block(self, node) -> None: ...
    def depart_doctest_block(self, node) -> None: ...
    def visit_document(self, node) -> None: ...
    def depart_document(self, node) -> None: ...
    def make_title(self) -> None: ...
    def append_bibliogaphy(self) -> None: ...
    def visit_emphasis(self, node) -> None: ...
    def depart_emphasis(self, node) -> None: ...
    def insert_additional_table_colum_delimiters(self) -> None: ...
    def visit_entry(self, node) -> None: ...
    def depart_entry(self, node) -> None: ...
    def visit_row(self, node) -> None: ...
    def depart_row(self, node) -> None: ...
    def visit_enumerated_list(self, node) -> None: ...
    def depart_enumerated_list(self, node) -> None: ...
    def visit_field(self, node) -> None: ...
    def depart_field(self, node) -> None: ...
    def visit_field_body(self, node) -> None: ...
    def depart_field_body(self, node) -> None: ...
    def visit_field_list(self, node) -> None: ...
    def depart_field_list(self, node) -> None: ...
    def visit_field_name(self, node) -> None: ...
    def depart_field_name(self, node) -> None: ...
    def visit_figure(self, node) -> None: ...
    def depart_figure(self, node) -> None: ...
    def visit_footer(self, node) -> None: ...
    def depart_footer(self, node) -> None: ...
    def visit_footnote(self, node) -> None: ...
    def depart_footnote(self, node) -> None: ...
    def visit_footnote_reference(self, node) -> None: ...
    def depart_footnote_reference(self, node) -> None: ...
    def label_delim(self, node, bracket, superscript) -> None: ...
    def visit_label(self, node) -> None: ...
    def depart_label(self, node) -> None: ...
    def visit_generated(self, node) -> None: ...
    def depart_generated(self, node) -> None: ...
    def visit_header(self, node) -> None: ...
    def depart_header(self, node) -> None: ...
    def to_latex_length(self, length_str: str, pxunit: Unused = None) -> str: ...
    def visit_image(self, node) -> None: ...
    def depart_image(self, node) -> None: ...
    def visit_inline(self, node) -> None: ...
    def depart_inline(self, node) -> None: ...
    def visit_legend(self, node) -> None: ...
    def depart_legend(self, node) -> None: ...
    def visit_line(self, node) -> None: ...
    def depart_line(self, node) -> None: ...
    def visit_line_block(self, node) -> None: ...
    def depart_line_block(self, node) -> None: ...
    def visit_list_item(self, node) -> None: ...
    def depart_list_item(self, node) -> None: ...
    def visit_literal(self, node) -> None: ...
    def depart_literal(self, node) -> None: ...
    def is_plaintext(self, node) -> bool: ...
    def visit_literal_block(self, node) -> None: ...
    def depart_literal_block(self, node) -> None: ...
    def visit_meta(self, node) -> None: ...
    def depart_meta(self, node) -> None: ...
    def visit_math(self, node, math_env: str = "$") -> None: ...
    def depart_math(self, node) -> None: ...
    def visit_math_block(self, node) -> None: ...
    def depart_math_block(self, node) -> None: ...
    def visit_option(self, node) -> None: ...
    def depart_option(self, node) -> None: ...
    def visit_option_argument(self, node) -> None: ...
    def depart_option_argument(self, node) -> None: ...
    def visit_option_group(self, node) -> None: ...
    def depart_option_group(self, node) -> None: ...
    def visit_option_list(self, node) -> None: ...
    def depart_option_list(self, node) -> None: ...
    def visit_option_list_item(self, node) -> None: ...
    def depart_option_list_item(self, node) -> None: ...
    def visit_option_string(self, node) -> None: ...
    def depart_option_string(self, node) -> None: ...
    def visit_organization(self, node) -> None: ...
    def depart_organization(self, node) -> None: ...
    def visit_paragraph(self, node) -> None: ...
    def depart_paragraph(self, node) -> None: ...
    def visit_problematic(self, node) -> None: ...
    def depart_problematic(self, node) -> None: ...
    def visit_raw(self, node) -> None: ...
    def depart_raw(self, node) -> None: ...
    def has_unbalanced_braces(self, string: Iterable[str]) -> bool: ...
    def visit_reference(self, node) -> None: ...
    def depart_reference(self, node) -> None: ...
    def visit_revision(self, node) -> None: ...
    def depart_revision(self, node) -> None: ...
    def visit_rubric(self, node) -> None: ...
    def depart_rubric(self, node) -> None: ...
    def visit_section(self, node) -> None: ...
    def depart_section(self, node) -> None: ...
    def visit_sidebar(self, node) -> None: ...
    def depart_sidebar(self, node) -> None: ...
    attribution_formats: dict[str, tuple[str, str]]
    def visit_attribution(self, node) -> None: ...
    def depart_attribution(self, node) -> None: ...
    def visit_status(self, node) -> None: ...
    def depart_status(self, node) -> None: ...
    def visit_strong(self, node) -> None: ...
    def depart_strong(self, node) -> None: ...
    def visit_substitution_definition(self, node) -> None: ...
    def visit_substitution_reference(self, node) -> None: ...
    def visit_subtitle(self, node) -> None: ...
    def depart_subtitle(self, node) -> None: ...
    def visit_system_message(self, node) -> None: ...
    def depart_system_message(self, node) -> None: ...
    def visit_table(self, node) -> None: ...
    def depart_table(self, node) -> None: ...
    def visit_target(self, node) -> None: ...
    def depart_target(self, node) -> None: ...
    def visit_tbody(self, node) -> None: ...
    def depart_tbody(self, node) -> None: ...
    def visit_term(self, node) -> None: ...
    def depart_term(self, node) -> None: ...
    def visit_tgroup(self, node) -> None: ...
    def depart_tgroup(self, node) -> None: ...
    def thead_depth(self) -> int: ...
    def visit_thead(self, node) -> None: ...
    def visit_title(self, node) -> None: ...
    def depart_title(self, node) -> None: ...
    def visit_contents(self, node) -> None: ...
    def visit_topic(self, node) -> None: ...
    def depart_topic(self, node) -> None: ...
    def visit_transition(self, node) -> None: ...
    def depart_transition(self, node) -> None: ...
    def visit_version(self, node) -> None: ...
    def depart_version(self, node) -> None: ...
    def unimplemented_visit(self, node) -> None: ...
